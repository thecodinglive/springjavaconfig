apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'war'


apply plugin : 'eclipse-wtp'
apply plugin : 'idea' 

apply from : 'gradle/lib.gradle'


group = 'com.ttp'
version = '1.0.1'

description = """cms api"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

war.archiveName "ROOT.war"

compileJava.options.compilerArgs = ["-Xlint:unchecked", "-Xlint:deprecation"]

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-cargo-plugin:2.2.3'
    }
}


defaultTasks 'initProject'

sourceSets {
    main {
        java {
            srcDir "src/main/java"
        }
        resources {
            //기본설정값과 개발환경에 대한 설정값을 가진 디렉토리 이용
            srcDir "src/main/resources"
        }
    }
}




final String DEFAULT_PROFILE = 'test'
String profile2 = DEFAULT_PROFILE


task initProject(description: "Initialization Project") << {
    /*
    sourceSets.main.java.srcDirs.each {it.mkdirs()}
    sourceSets.main.resources.srcDirs.each {it.mkdirs()}
    sourceSets.test.java.srcDirs.each {it.mkdirs()}
    sourceSets.test.resources.srcDirs.each {it.mkdirs()}
    */
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
  
	def webappDir = "$rootDir/src/main/webapp"
	
    file(webappDir + "/WEB-INF/views").mkdirs()
    file(webappDir + "/META-INF").mkdir()
}

tasks.eclipse.dependsOn cleanEclipse
tasks.eclipse.dependsOn initProject

allprojects {
    if (!project.hasProperty('profile') || !profile) {
        ext.profile = DEFAULT_PROFILE
    }
    
    if (profile=='prod' || profile=='prod2') {
    	profile2 = 'prod'
    } else {
    	profile2 = DEFAULT_PROFILE
    }
    println 'target-resources :' + profile2

    // 리소스에 각 프로필별 리소스 디렉토리 추가
    sourceSets {
        main {
			java{
			}
            resources {
                srcDir "src/main/resources-${profile2}"
				include "**/*.xml"
				include "**/*.properties"
				
                srcDir "src/main/java"
				include "**/*.xml"
            }
        }
    }
}

eclipse{
    classpath {
        downloadSources = true
        defaultOutputDir = file("${buildDir}/classes/main")
        file{
            withXml{
                xml -> def node = xml.asNode()
                    node.remove( node.find {it.@path == 'org.eclipse.jst.j2ee.internal.web.container'})
                    node.appendNode('classpathentry',[kind:'con',path: 'org.eclipse.jst.j2ee.internal.web.container', exported:'true'])
            }
        }
    }

    jdt{
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    wtp{
        component{
            contextPath ='/'
        }
        facet{
            facet name :'jst.web',   version:'3.0'
            facet name : 'jst.java', version:'1.8'
        }
    }
}


